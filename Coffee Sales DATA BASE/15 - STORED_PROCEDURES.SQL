CREATE OR ALTER PROCEDURE proc_CUSTOMER_LOG_IN @EMAIL VARCHAR(30)
AS
BEGIN
    SELECT CUSTOMER_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, MEMBER, CITY, ZIP_CODE, STREET
	FROM CUSTOMER A
	INNER JOIN CITY B ON A.CITY_ID = B.CITY_ID
	INNER JOIN COUNTRY C ON B.COUNTRY_ID = C.COUNTRY_ID
	WHERE EMAIL = @EMAIL
END
GO

CREATE OR ALTER PROCEDURE proc_GET_PRODUCTS AS
BEGIN
	SELECT PRODUCT_ID, COFFEE_TYPE, ROAST_TYPE, UNIT_SIZE, UNIT_PRICE
	FROM PRODUCT A
	INNER JOIN COFFEE_TYPE B ON A.COFFEE_TYPE_ID = B.COFFEE_TYPE_ID
	INNER JOIN ROAST_TYPE C ON A.ROAST_TYPE_ID = C.ROAST_TYPE_ID
END
GO

CREATE OR ALTER PROCEDURE proc_CHECK_OUT @CUSTOMER_ID INT, @SHOPPING_CART SHOPPING_CART_TYPE READONLY
AS
BEGIN
    --DEFINE VARIABLES
    DECLARE @ORDER_DATE DATE = CAST(GETDATE() AS DATE)
    DECLARE @ORDER_DATE_ID INT
    DECLARE @ORDER_ID INT

    --INSERT INTO ORDER_DATE TABLE IF CURRENT DATE NOT ALL READY IN ORDER_DATE TABLE
    IF NOT EXISTS (SELECT 1 FROM ORDER_DATE WHERE ORDER_DATE = @ORDER_DATE) INSERT INTO ORDER_DATE VALUES (@ORDER_DATE)
    SET @ORDER_DATE_ID = (SELECT ORDER_DATE_ID FROM ORDER_DATE WHERE ORDER_DATE = @ORDER_DATE)

    --INSERT INTO ORDER TABLE AND GET THE ORDER ID
    INSERT INTO [ORDER] VALUES(@ORDER_DATE_ID, @CUSTOMER_ID)
    SET @ORDER_ID = (SELECT MAX(ORDER_ID) FROM [ORDER] WHERE ORDER_DATE_ID = @ORDER_DATE_ID AND CUSTOMER_ID = @CUSTOMER_ID)

    --INSERT NEW ORDER INTO ORDER_LINE TABLE
    INSERT INTO ORDER_LINE
    SELECT @ORDER_ID, PRODUCT_ID
    FROM @SHOPPING_CART

    --IF ALL GOES WELL COMMIT TRANSACTION ELSE ROLLBACK TRANSACTION
    IF @@ERROR = 0 COMMIT TRANSACTION
    ELSE ROLLBACK TRANSACTION
END
GO